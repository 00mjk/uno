<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<IsTool>true</IsTool>
		<IncludeBuildOutput>false</IncludeBuildOutput>
		<PackageType>Template</PackageType>
	</PropertyGroup>

	<PropertyGroup>
		<PackageTags>dotnet-new;templates;uno-platform</PackageTags>
		<Authors>nventive</Authors>
		<PackageProjectUrl>https://github.com/unoplatform/uno</PackageProjectUrl>
		<PackageIconUrl>https://nv-assets.azurewebsites.net/logos/uno.png</PackageIconUrl>
		<RepositoryUrl>https://github.com/unoplatform/uno</RepositoryUrl>
		<Description></Description>
		<Copyright>Copyright (C) 2015-2019 nventive inc. - all rights reserved</Copyright>
		<GeneratePackageOnBuild Condition="'$(Configuration)'=='Release'">true</GeneratePackageOnBuild>
	</PropertyGroup>

	<ItemGroup>
		<UpToDateCheckInput Include="content\**" />
	</ItemGroup>

	<ItemGroup>
		<Compile Remove="content/**/*.cs" />
		<Content Include="content/xamarinforms-wasm/nuget.config">
			<Pack>true</Pack>
			<PackagePath>content/xamarinforms-wasm</PackagePath>
		</Content>
		<Content Include="content/xamarinforms-wasm/UnoQuickStart.Wasm/**/*.*">
			<Pack>true</Pack>
			<PackagePath>content/xamarinforms-wasm/UnoQuickStart.Wasm</PackagePath>
		</Content>
		<Content Include="content/xamarinforms-wasm/.template.config/*.*">
			<Pack>true</Pack>
			<PackagePath>content/xamarinforms-wasm/.template.config</PackagePath>
		</Content>
		<Content Include="content\unoapp\.template.config\**">
			<PackagePath>content/unoapp/.template.config</PackagePath>
			<Pack>true</Pack>
		</Content>
		<Content Include="content\unoapp\.vscode\**">
			<PackagePath>content/unoapp/.vscode</PackagePath>
			<Pack>true</Pack>
		</Content>
		<Content Include="content\unoapp\UnoQuickStart\**">
			<PackagePath>content\unoapp</PackagePath>
			<Pack>true</Pack>
		</Content>
	</ItemGroup>

	<Target Name="CopyTemplate" BeforeTargets="Build">
		<ItemGroup>
			<_TemplateFilesExclude Include="..\UnoSolutionTemplate\**\*.vstemplate" />
			<_TemplateFilesExclude Include="..\UnoSolutionTemplate\__*.png" />
			<_TemplateFilesExclude Include="..\UnoSolutionTemplate\**\obj\**" />
			<_TemplateFilesExclude Include="..\UnoSolutionTemplate\**\bin\**" />
			<_TemplateFilesExclude Include="..\UnoSolutionTemplate\Properties\**" />
			<_TemplateFilesExclude Include="..\UnoSolutionTemplate\UnoSolutionTemplate.csproj" />

			<_TemplateFiles Include="..\UnoSolutionTemplate\**" Exclude="@(_TemplateFilesExclude)" />
		</ItemGroup>

		<PropertyGroup>
			<IntermediateTemplatePath>$(IntermediateOutputPath)\UnoQuickStart</IntermediateTemplatePath>
		</PropertyGroup>

		<RemoveDir Directories="$(IntermediateTemplatePath)" />
		
		<Copy SourceFiles="@(_TemplateFiles)" DestinationFolder="$(IntermediateTemplatePath)\%(RecursiveDir)" />

		<ReplaceContent SourcePath="$(IntermediateTemplatePath)" SafeProjectName="UnoQuickStart" />

		<ItemGroup>
			<Content Include="$(IntermediateTemplatePath)/**/*.*">
				<Pack>true</Pack>
				<PackagePath>content/unoapp</PackagePath>
			</Content>
		</ItemGroup>
	</Target>

	<UsingTask TaskName="ReplaceContent" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<SourcePath ParameterType="System.String" Required="True" Output="False" />
			<SafeProjectName ParameterType="System.String" Required="True" Output="False" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Xml" />
			<Using Namespace="System" />
			<Using Namespace="System.Linq" />
			<Using Namespace="System.IO" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					string[] filters = new[] { "*.cs", "*.xml", "*.xaml", "*.plist", "*.js", "*.config", "*.appxmanifest", "*.projitems", "*.shproj", "*.csproj", "*.sln" };

					foreach (var file in filters.SelectMany(f => Directory.EnumerateFiles(SourcePath, f, SearchOption.AllDirectories)))
					{
						Log.LogMessage("Converting file: " + file);

						var s = File.ReadAllText(file);

						if(Path.GetExtension(file).ToLower() == ".cs")
						{
							// Disable conditionals for all imported files
							s += "//-:cnd:noEmit\r\n";
						}

						s = s
							.Replace("$ext_safeprojectname$", SafeProjectName)
							.Replace("$safeprojectname$", SafeProjectName)
							;

						File.WriteAllText(file, s);

					}

					var platforms = new string[] { "iOS", "UWP", "Wasm", "Droid", "macOS", "Shared" };

					foreach(var platform in platforms)
					{
						Directory.Move(Path.Combine(SourcePath, platform), Path.Combine(SourcePath, SafeProjectName + "." + platform));
					}
				]]>
			</Code>
		</Task>
	</UsingTask>

</Project>
